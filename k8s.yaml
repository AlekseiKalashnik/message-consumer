apiVersion: v1
kind: Namespace
metadata:
  name: hello-world #создание namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: message-consumer-deployment #имя deployment
  namespace: hello-world #указал выше
spec:
  replicas: 1
  selector:
    matchLabels:
      app: message-consumer
  template:
    metadata:
      namespace: hello-world
      labels:
        app: message-consumer #lables важны их можно списком указывать разные
    spec:
      containers:
        - name: message-consumer #присваиваю имя контейнеру в поде
          image: cr.yandex/crpt2j4od8cl0kpuvph9/hello:latest #в работе можем менять лишь файл без остановки пода, например на nginx и он будет доступен по этим же портам
          imagePullPolicy: Always
          ports:
            - containerPort: 8184
              #открытый ранее порт контейнера
              #kubectl port-forward (pod-name) 8181(браузер):80(контейнер)
              #Для тех, кто запускает kubectl не у себя, а на удаленном сервере, команда выглядит так:
              #kubectl port-forward --address 0.0.0.0 my-web 8183:80




#apiVersion: v1
#kind: Service
#metadata:
#  name: message-consumer-service
#spec:
#  selector:
#    app: message-consumer
#  type: NodePort
#  ports:
#    - port: 8184
#      targetPort: 8184